import React, {
  createContext,
  Dispatch,
  SetStateAction,
  useContext,
  useMemo,
  useState,
} from 'react';

import {
  IVulnerabilityWidgets,
  VulnerabilityWidgetsDefaultConfig,
} from 'modules/Vulnerability/interfaces/Widgets';
import { IVulnerability } from 'modules/Vulnerability/interfaces';
import {
  AlertsSeverityByTime,
  MostAffectedAgents,
  MostCommonCVEs,
  MostCommonCWEs,
  TopAffectedPackagesByCVEs,
} from 'modules/Vulnerability/components';
import { SEVERITY } from 'modules/Shared/enums/Vulnerability';

export const vulnerabilityWidgets: IVulnerabilityWidgets = {
  alertsSeverityByTime: {
    ...VulnerabilityWidgetsDefaultConfig.alertsSeverityByTime,
    Component: AlertsSeverityByTime,
  },
  mostAffectedAgents: {
    ...VulnerabilityWidgetsDefaultConfig.mostAffectedAgents,
    Component: MostAffectedAgents,
  },
  mostCommonCVEs: {
    ...VulnerabilityWidgetsDefaultConfig.mostCommonCVEs,
    Component: MostCommonCVEs,
  },
  mostCommonCWEs: {
    ...VulnerabilityWidgetsDefaultConfig.mostCommonCWEs,
    Component: MostCommonCWEs,
  },
  topAffectedPackagesByCVEs: {
    ...VulnerabilityWidgetsDefaultConfig.topAffectedPackagesByCVEs,
    Component: TopAffectedPackagesByCVEs,
  },
};

export interface IVulnerabilityFilters {
  severity?: SEVERITY;
}

interface IVulnerabilityContext {
  setVulnerabilitiesFilters: Dispatch<
    SetStateAction<IVulnerabilityFilters | null>
  >;
  vulnerabilitiesFilters: IVulnerabilityFilters | null;
  formattedVulnerabilityFilters: string;
  selectedVulnerability: IVulnerability | null;
  setSelectedVulnerability: Dispatch<SetStateAction<IVulnerability | null>>;
  isVulnerabilityDialogOpen: boolean;
  setIsVulnerabilityDialogOpen: Dispatch<SetStateAction<boolean>>;
}

const vulnerabilityContextDefaultValues = {
  formattedVulnerabilityFilters: '',
  vulnerabilitiesFilters: null,
  setVulnerabilitiesFilters: () => {},
  selectedVulnerability: null,
  setSelectedVulnerability: () => {},
  isVulnerabilityDialogOpen: false,
  setIsVulnerabilityDialogOpen: () => {},
};

const VulnerabilityContext = createContext<IVulnerabilityContext>(
  vulnerabilityContextDefaultValues
);

const getFormattedFilters = (filters: IVulnerabilityFilters | null) => {
  if (!filters) return '';

  return Object.entries(filters)
    .map(([key, value], index) => {
      if (index === 0) return `?${key}=${value}`;
      return `&${key}=${value}`;
    })
    .join('');
};

export const VulnerabilityProvider: React.FC = ({ children }) => {
  const [isVulnerabilityDialogOpen, setIsVulnerabilityDialogOpen] =
    useState(false);
  const [selectedVulnerability, setSelectedVulnerability] =
    useState<IVulnerability | null>(null);
  const [vulnerabilitiesFilters, setVulnerabilitiesFilters] =
    useState<IVulnerabilityFilters | null>(null);

  const formattedVulnerabilityFilters = useMemo(
    () => getFormattedFilters(vulnerabilitiesFilters),
    [vulnerabilitiesFilters]
  );

  const value = useMemo(
    () => ({
      selectedVulnerability,
      setSelectedVulnerability,
      isVulnerabilityDialogOpen,
      setIsVulnerabilityDialogOpen,
      setVulnerabilitiesFilters,
      formattedVulnerabilityFilters,
      vulnerabilitiesFilters,
    }),
    [
      isVulnerabilityDialogOpen,
      selectedVulnerability,
      vulnerabilitiesFilters,
      formattedVulnerabilityFilters,
    ]
  );

  return (
    <VulnerabilityContext.Provider value={value}>
      {children}
    </VulnerabilityContext.Provider>
  );
};

export const useVulnerabilityContext = () => useContext(VulnerabilityContext);
