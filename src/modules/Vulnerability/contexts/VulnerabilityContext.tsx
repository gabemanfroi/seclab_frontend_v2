import React, {
  createContext,
  Dispatch,
  SetStateAction,
  useContext,
  useMemo,
  useState,
} from 'react';

import {
  IVulnerabilityWidgets,
  VulnerabilityWidgetsDefaultConfig,
} from 'modules/Vulnerability/interfaces/Widgets';
import {
  IAlertsSeverityByTime,
  IMostAffectedAgents,
  IMostCommonCVEs,
  IMostCommonCWEs,
  ITopAffectedPackagesByCVEs,
  IVulnerability,
} from 'modules/Vulnerability/interfaces';
import {
  AlertsSeverityByTime,
  MostAffectedAgents,
  MostCommonCVEs,
  MostCommonCWEs,
  TopAffectedPackagesByCVEs,
} from 'modules/Vulnerability/components';

export const vulnerabilityWidgets: IVulnerabilityWidgets = {
  alertsSeverityByTime: {
    ...VulnerabilityWidgetsDefaultConfig.alertsSeverityByTime,
    Component: AlertsSeverityByTime,
  },
  mostAffectedAgents: {
    ...VulnerabilityWidgetsDefaultConfig.mostAffectedAgents,
    Component: MostAffectedAgents,
  },
  mostCommonCVEs: {
    ...VulnerabilityWidgetsDefaultConfig.mostCommonCVEs,
    Component: MostCommonCVEs,
  },
  mostCommonCWEs: {
    ...VulnerabilityWidgetsDefaultConfig.mostCommonCWEs,
    Component: MostCommonCWEs,
  },
  topAffectedPackagesByCVEs: {
    ...VulnerabilityWidgetsDefaultConfig.topAffectedPackagesByCVEs,
    Component: TopAffectedPackagesByCVEs,
  },
};

interface IVulnerabilityContext {
  alertsSeverityByTime: IAlertsSeverityByTime | undefined;
  mostAffectedAgents: IMostAffectedAgents | undefined;
  mostCommonCVEs: IMostCommonCVEs | undefined;
  mostCommonCWEs: IMostCommonCWEs | undefined;
  topAffectedPackagesByCVEs: ITopAffectedPackagesByCVEs | undefined;
  widgetsHandler: { [key: string]: Dispatch<SetStateAction<any>> };
  selectedVulnerability: IVulnerability | null;
  setSelectedVulnerability: Dispatch<SetStateAction<IVulnerability | null>>;
  isVulnerabilityDialogOpen: boolean;
  setIsVulnerabilityDialogOpen: Dispatch<SetStateAction<boolean>>;
}

const vulnerabilityContextDefaultValues = {
  alertsSeverityByTime: undefined,
  mostAffectedAgents: undefined,
  mostCommonCVEs: undefined,
  mostCommonCWEs: undefined,
  topAffectedPackagesByCVEs: undefined,
  widgetsHandler: {},
  selectedVulnerability: null,
  setSelectedVulnerability: () => {},
  isVulnerabilityDialogOpen: false,
  setIsVulnerabilityDialogOpen: () => {},
};

const VulnerabilityContext = createContext<IVulnerabilityContext>(
  vulnerabilityContextDefaultValues
);

export const VulnerabilityProvider: React.FC = ({ children }) => {
  const [isVulnerabilityDialogOpen, setIsVulnerabilityDialogOpen] =
    useState(false);
  const [selectedVulnerability, setSelectedVulnerability] =
    useState<IVulnerability | null>(null);
  const [alertsSeverityByTime, setAlertsSeverityByTime] = useState<
    IAlertsSeverityByTime | undefined
  >();
  const [mostAffectedAgents, setMostAffectedAgents] = useState<
    IMostAffectedAgents | undefined
  >();
  const [mostCommonCVEs, setMostCommonCVEs] = useState<
    IMostCommonCVEs | undefined
  >();
  const [mostCommonCWEs, setMostCommonCWEs] = useState<
    IMostCommonCWEs | undefined
  >();
  const [topAffectedPackagesByCVEs, setTopAffectedPackagesByCVEs] = useState<
    ITopAffectedPackagesByCVEs | undefined
  >();

  const widgetsHandler = {
    alertsSeverityByTime: setAlertsSeverityByTime,
    mostAffectedAgents: setMostAffectedAgents,
    mostCommonCVEs: setMostCommonCVEs,
    mostCommonCWEs: setMostCommonCWEs,
    topAffectedPackagesByCVEs: setTopAffectedPackagesByCVEs,
  };

  const value = useMemo(
    () => ({
      alertsSeverityByTime,
      mostAffectedAgents,
      mostCommonCVEs,
      mostCommonCWEs,
      topAffectedPackagesByCVEs,
      widgetsHandler,
      selectedVulnerability,
      setSelectedVulnerability,
      isVulnerabilityDialogOpen,
      setIsVulnerabilityDialogOpen,
    }),
    [
      isVulnerabilityDialogOpen,
      selectedVulnerability,
      alertsSeverityByTime,
      mostAffectedAgents,
      mostCommonCVEs,
      mostCommonCWEs,
      topAffectedPackagesByCVEs,
    ]
  );

  return (
    <VulnerabilityContext.Provider value={value}>
      {children}
    </VulnerabilityContext.Provider>
  );
};

export const useVulnerabilityContext = () => useContext(VulnerabilityContext);
